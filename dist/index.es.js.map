{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["/** Tree options interface（树选项配置）*/\nexport interface TreeOptions {\n  /** Unique identification property name of the tree node（节点的唯一标识属性名称） */\n  id?: string;\n  /** Parent node property name of the tree node（节点的父节点属性名称） */\n  parent?: string;\n  /** Children node property name of the tree node（节点的子节点属性名称） */\n  children?: string;\n}\n\n/** 节点路径 */\ninterface NodePath<T> {\n  /** Node index path（节点索引路径） */\n  indexPath: number[];\n  /** Node path（节点路径） */\n  itemPath: T[];\n}\n\n/** Tree Class（树类）*/\nexport class Tree<T extends object> {\n  /** Tree default options（树默认选项配置） */\n  private static readonly defaultOptions: Required<TreeOptions> = {\n    id: 'id',\n    parent: '',\n    children: 'children',\n  };\n\n  /** Tree options（树选项配置） */\n  private options: Required<TreeOptions>;\n\n  /**\n   * Flat array conversion tree array（扁平数组转换树数组）\n   * @param list Flat array（扁平数组）\n   * @param options Tree options（树选项配置）\n   */\n  static toTreeData<T extends object>(list: T[], options: Required<TreeOptions>) {\n    const { id, parent, children } = options;\n    let result = list.reduce((map: any, item: any) => ((map[item[id]] = item), (item[children] = []), map), {});\n    return list.filter((item: any) => {\n      result[item[parent]] && result[item[parent]].children.push(item);\n      return !item[parent];\n    });\n  }\n\n  /** Tree data（树数据） */\n  data: T[];\n\n  /**\n   * Tree class constructor（树构造函数）\n   * @param data Tree structure data or flat tree structure data（树形结构数据或扁平的树形结构数据）\n   * @param options Tree options（树选项配置）\n   */\n  constructor(data: T[], options?: TreeOptions) {\n    this.options = { ...Tree.defaultOptions, ...options };\n    this.data = options?.parent ? Tree.toTreeData(data, this.options) : data;\n  }\n\n  /**\n   * Determine node has children（判断节点是否有子节点）\n   * @param node Node object（节点）\n   */\n  hasChildren(node: any) {\n    return Array.isArray(node[this.options.children]) && node[this.options.children].length > 0;\n  }\n\n  /**\n   * Tree node traversal（树节点遍历）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  forEach(\n    callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => void,\n    path: NodePath<T> = { indexPath: [], itemPath: [] }\n  ) {\n    this.data.forEach((item: any, index) => {\n      try {\n        path.indexPath.push(index);\n        path.itemPath.push(item);\n        callback.call(this, item, { ...path }, this.data);\n        this.hasChildren(item) && new Tree<T>(item[this.options.children], this.options).forEach(callback, path);\n      } catch (error) {\n        throw error;\n      } finally {\n        path.indexPath.pop();\n        path.itemPath.pop();\n      }\n    });\n  }\n\n  /**\n   * Tree node mapping（树节点映射转换）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  map<U>(\n    callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => U,\n    path: NodePath<T> = { indexPath: [], itemPath: [] }\n  ) {\n    return this.data.map((item: any, index) => {\n      try {\n        path.indexPath.push(index);\n        path.itemPath.push(item);\n        this.hasChildren(item) &&\n          (item[this.options.children] = new Tree<T>(item[this.options.children], this.options).map(callback, path));\n        return callback.call(this, item, { ...path }, this.data);\n      } catch (error) {\n        throw error;\n      } finally {\n        path.indexPath.pop();\n        path.itemPath.pop();\n      }\n    });\n  }\n\n  /**\n   * Tree node filter（树节点过滤）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  filter(\n    callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => unknown,\n    path: NodePath<T> = { indexPath: [], itemPath: [] }\n  ) {\n    return this.data.filter((item: any, index) => {\n      try {\n        path.indexPath.push(index);\n        path.itemPath.push(item);\n        this.hasChildren(item) &&\n          (item[this.options.children] = new Tree<T>(item[this.options.children], this.options).filter(callback, path));\n        return callback.call(this, item, { ...path }, this.data);\n      } catch (error) {\n        throw error;\n      } finally {\n        path.indexPath.pop();\n        path.itemPath.pop();\n      }\n    });\n  }\n\n  /**\n   * Find tree node（查找树节点）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  find(callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => unknown) {\n    let result: T | undefined;\n    try {\n      this.forEach((item, path, tree) => {\n        if (callback.call(this, item, { ...path }, tree)) result = item;\n        if (result) throw new Error('StopIteration');\n      });\n    } catch (error) {\n      if (error.message !== 'StopIteration') throw error;\n    } finally {\n      return result;\n    }\n  }\n\n  /**\n   * If there are tree nodes that meet the conditions, it returns true, otherwise it returns false（如有满足条件的树节点则返回true，反之则返回false）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  some(callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => unknown) {\n    let result: Boolean = false;\n    try {\n      this.forEach((item, path, tree) => {\n        if (callback.call(this, item, { ...path }, tree)) result = true;\n        if (result) throw new Error('StopIteration');\n      });\n    } catch (error) {\n      if (error.message !== 'StopIteration') throw error;\n    } finally {\n      return result;\n    }\n  }\n\n  /**\n   * If all tree nodes meet the conditions, it returns true, otherwise it returns false（若所有树节点满足条件则返回true，反之则返回false）\n   * @param callback Tree node callback function（节点回调函数）\n   */\n  every(callback: (this: Tree<T>, node: T, path: NodePath<T>, tree: T[]) => unknown) {\n    let result: Boolean = true;\n    try {\n      this.forEach((item, path, tree) => {\n        if (!callback.call(this, item, { ...path }, tree)) result = false;\n        if (!result) throw new Error('StopIteration');\n      });\n    } catch (error) {\n      if (error.message !== 'StopIteration') throw error;\n    } finally {\n      return result;\n    }\n  }\n\n  /**\n   * Tree flattening（树扁平化）\n   */\n  flat() {\n    const result: T[] = [];\n    this.forEach((item) => result.push(item));\n    return result;\n  }\n\n  /**\n   * Tree data string representation（树数据字符串表示形式）\n   */\n  toString() {\n    return JSON.stringify(this.data);\n  }\n}\n\n/**\n * Return a tree instance（返回一个树实例）\n * @param data Tree structure data or flat tree structure data（树形结构数据或扁平的树形结构数据）\n * @param options Tree options（树选项配置）\n */\nexport default function tree<T extends object>(data: T[], options?: TreeOptions) {\n  return new Tree(data, options);\n}\n"],"names":[],"mappings":"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"}